(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{0:function(t,e,n){t.exports=n("tjUo")},tjUo:function(t,e,n){"use strict";n.r(e);var a=n("METc"),o=(n("0IsJ"),n("5iTg"),n("2dHD"),n("XIp8"));const l=(t,e,n,l)=>{a.a.chart(t,{chart:{type:"heatmap"},title:{text:"Heat Map",align:"left",x:40},xAxis:{categories:e.slice()},yAxis:{categories:n.slice(),title:null},colorAxis:{stops:[[.1,"#78b8ed"],[.5,"#fffbbc"],[.8,"#c4463a"],[1,"#c4463a"]],min:0},legend:{align:"right",layout:"vertical",verticalAlign:"top",y:24,title:{text:"TPM(log2+1)"}},tooltip:{formatter:function(){return`\n                    <b>Sample Name:</b> ${e[this.point.x]}<br> \n                    <b>Gene:</b> ${n[this.point.y]}<br> \n                    <b>TPM(log2+1):</b> ${this.point.value}<br> \n                    `}},series:[{borderWidth:0,data:Object(o.a)(l),dataLabels:{enabled:!1}}],caption:{text:"\n                <b>NP</b>: Normal person; \n                <b> CHD</b>: Coronary heart disease; \n                <b>CRC</b>: Colorectal cancer; \n                <br>\n                <b>HCC</b>: Hepatocellular carcinoma;\n                <b>PAAD</b>:Pancreatic adenocarcinoma; \n                <b>WhB</b>: Whole blood.\n            ",useHTML:!0,align:"center"}})};var c=(t,e)=>{const n=e.maxCategory.slice(),a=e.infos.map(t=>t.name),o=[];for(let t=0;t<e.infos.length;t++){const n=e.infos[t];for(let e=0;e<n.data.length;e++)o.push([e,t,(c=n.data[e],Math.log2(c+1))])}var c;l(t,n,a,o)};n("HUbD");var i=(t,e)=>{const n=(t=>{const e=[],n=t.maxCategory.slice();n.unshift(null),e.push(n);const a=t.infos;for(let t=0;t<a.length;t++){const n=[a[t].name,...a[t].data];e.push(n)}return console.log(e),e})(Object(o.a)(e));a.a.chart(t,{data:{columns:n},boost:{useGPUTranslations:!0},title:{text:"Line Chart",align:"left",x:40},xAxis:{type:"category"},yAxis:{type:"linear",title:{text:"Expression (TPM)"}},tooltip:{useHTML:!0}})};var r=()=>new Promise(t=>{n.e(3).then(n.t.bind(null,"axLQ",3)).then(e=>{t(e.default)}).catch(t=>console.log("mock data not loaded: "+t))});const s=t=>{let e=document.createElement("div");e.id=t,document.body.appendChild(e),e=null};!async function(){try{const t=await r();s("gene-chart-entry-1"),s("gene-chart-entry-2"),i("gene-chart-entry-1",t),c("gene-chart-entry-2",t)}catch(t){console.log(t)}}()}},[[0,1,2]]]);